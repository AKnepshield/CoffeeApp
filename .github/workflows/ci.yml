name: Tests & Linting 

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9.18

    - name: Install Poetry
      run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path .virtualenvs

    - name: Poetry Version
      id: poetry-version
      run: echo "::set-output name=version::$(poetry --version | grep -oP '[\d\.]+')"

    - name: Cache Poetry virtualenv
      uses: actions/cache@v2
      id: cache
      with:
        path: .virtualenvs
        key: ${{ inputs.os }}-${{ inputs.python-version }}-poetry-${{ steps.poetry-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ inputs.os }}-${{ inputs.python-version }}-poetry-${{ steps.poetry-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        poetry install
      if: steps.cache.outputs.cache-hit != 'true'

    - name: Run Linting
      uses: chartboost/ruff-action@v1

    - name: Run pytest
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      run: poetry run pytest
